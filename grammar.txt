program     → declaration* EOF ;

declaration → funDecl 
            | varDecl
            | statement ;

funDecl     → "fun" function ;

function    → IDENTIFIER "(" parameters? ")" block ;

parameters  → IDENTIFIER ( "," IDENTIFIER )* ;

varDecl     → "var" IDENTIFIER ( "=" expression )? ";" ;

statement   → exprStmt
            | forStmt
            | ifStmt
            | printStmt
			| returnStmt
			| whileStmt
			| block ;

exprStmt    → expression ";" ;
ifStmt      → "if" "(" expression ")" statement ( "else" statement )? ;
forStmt     → "for" "(" ( varDecl | exprStmt | ";" )
                        expression? ";" epxression? ";" statement;
printStmt   → "print" expression ";" ;
returnStmt  → "return" expression? ";" ;
whileStmt   → "while" "(" expression ")" statement ;
block       → "{" declaration* "}" ;

expression  → assignment ( "," assignment )* ;
assignment  → IDENTIFIER "=" assignment
            | logic_or ;
logic_or    → logic_and ( "or" logic_and )* ;
logic_and   → binary_err ( "and" binary_err )* ;
binary_err  → ("!=" | "==" | ">" | ">=" | "<" | "<=" | "+" | "/" | "*") comma
            | ternary ;
ternary     → equality ( "?" assignment ":" assignment )? ;
equality    → comparison ( ( "!=" | "==" ) comparison )* ;
comparison  → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        → factor ( ( "-" | "+" ) factor )* ;
factor      → unary ( ( "/" | "*" ) unary )* ;
unary       → ( "!" | "-" ) unary
            | call ;
call        → primary ( "(" arguments? ")" )* ;
arguments   → assignment ( "," assignment )* ;
primary     → "true" | "false" | "null" | "this"
            | NUMBER | STRING
            | "(" expression ")"
		    | IDENTIFIER ;


PRECEDENCE(highest first) AND ASSOCIATIVITY:

Name	    Operators	Associates
Unary	    ! -	        Right
Factor	    / *	        Left
Term	    - +	        Left
Comparison	> >= < <=	Left
Equality	== !=	    Left